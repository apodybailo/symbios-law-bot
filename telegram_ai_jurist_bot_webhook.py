import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from email_extractor_exchange import fetch_emails, connect_to_exchange

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID", "0"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ai_jurist_webhook")

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É –ø–æ—à—Ç–∏
async def latest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    await update.message.reply_text("üì¨ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–æ–±–∫—É –ø–æ—à—Ç–∏...")
    try:
        acc = connect_to_exchange()
        fetch_emails(acc)
        await update.message.reply_text("‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    await update.message.reply_text("üîç –î–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /latest –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç.")

# –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É –∑ webhook
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ SYMBIOS AI –Æ—Ä–∏—Å—Ç (Webhook)...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("latest", latest))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    app.run_webhook(
        listen="0.0.0.0",
        port=8080,
        webhook_url=f"{WEBHOOK_URL}"
    )

import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

from webhook_bot_gpt import generate_gpt_response
from webhook_bot_gpt_memory import memory_lookup
from email_extractor_exchange import fetch_emails
from ocr_parser import parse_attachments

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    await update.message.reply_text("‚úÖ SYMBIOS LAW BOT –∑–∞–ø—É—â–µ–Ω–æ.")

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return

    user_input = update.message.text
    logger.info(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_input}")

    # –ü–æ—à—É–∫ —É –ø–∞–º º—è—Ç—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    context_memory = memory_lookup(user_input)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    gpt_reply = generate_gpt_response(user_input, context_memory)

    # –í–∏—Ç—è–≥ –ø–æ—à—Ç–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —Ç—ñ–ª—å–∫–∏ —è–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è)
    # emails = fetch_emails()
    # parsed_attachments = parse_attachments(emails)

    await update.message.reply_text(gpt_reply)

# –ó–∞–ø—É—Å–∫ Webhook
def main():
    logger.info("üöÄ –°—Ç–∞—Ä—Ç SYMBIOS LAW BOT")

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    PORT = int(os.environ.get("PORT", 8080))
    app.run_webhook(
        listen="0.0.0.0",
        port=8080,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()

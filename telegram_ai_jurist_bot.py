import os
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler
from openai import OpenAI
from dotenv import load_dotenv
import tempfile
import docx2txt
import fitz
from PIL import Image
import pytesseract

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

SYSTEM_PROMPT = (
    "–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π —é—Ä–∏—Å—Ç. –ì–µ–Ω–µ—Ä—É–π –æ—Ñ—ñ—Ü—ñ–π–Ω—É —é—Ä–∏–¥–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, "
    "–∞–Ω–∞–ª—ñ–∑—É—é—á–∏ –∑–º—ñ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–±–æ –∑–∞–ø–∏—Ç—É. –í—Ä–∞—Ö–æ–≤—É–π –¥—ñ–ª–æ–≤–∏–π —Å—Ç–∏–ª—å —ñ –ø—Ä–∞–∫—Ç–∏–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å–ª—É–∂–±–æ–≤—ñ –ª–∏—Å—Ç–∏."
)

def extract_text_from_file(file_path):
    ext = os.path.splitext(file_path)[1].lower()
    try:
        if ext == ".pdf":
            doc = fitz.open(file_path)
            return "\n".join([page.get_text() for page in doc])
        elif ext == ".docx":
            return docx2txt.process(file_path)
        elif ext in [".jpg", ".jpeg", ".png"]:
            image = Image.open(file_path)
            return pytesseract.image_to_string(image)
        else:
            return f"(–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: {ext})"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è), —ñ —è —Å—Ñ–æ—Ä–º—É—é —é—Ä–∏–¥–∏—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.document.get_file()
    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        await file.download_to_drive(tmp.name)
        extracted_text = extract_text_from_file(tmp.name)

    await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –ì–µ–Ω–µ—Ä—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å...")

    try:
        completion = client.chat.completions.create(
            model="gpt-4-0125-preview",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": f"–û—Å—å –¥–æ–∫—É–º–µ–Ω—Ç:\n\n{extracted_text}"}
            ],
            temperature=0.5,
            max_tokens=1000
        )
        response = completion.choices[0].message.content
        await update.message.reply_text(f"üß† –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n\n{response}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå GPT –ø–æ–º–∏–ª–∫–∞: {str(e)}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.run_polling()

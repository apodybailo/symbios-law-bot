import os
import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from webhook_bot_gpt_memory import generate_gpt_with_memory, memory_lookup
from email_extractor_exchange import connect_to_exchange, fetch_emails
from ocr_parser import extract_text_from_file  # —Ä–µ–∞–ª—ñ–∑—É–π –ª–æ–≥—ñ–∫—É –≤ ocr_parser.py

# --- –ö–æ–Ω—Ñ—ñ–≥ ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
AUTHORIZED_USER_ID = int(os.getenv("AUTHORIZED_USER_ID", 0))

# --- FastAPI App ---
fastapi_app = FastAPI()

# --- Telegram Bot ---
telegram_app = Application.builder().token(TOKEN).build()

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == AUTHORIZED_USER_ID:
        await update.message.reply_text("‚úÖ SYMBIOS LAW BOT (FastAPI) –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")

# --- –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return

    text = update.message.text
    logger.info(f"[üì©] –í—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {text}")

    context_memory = memory_lookup(text)
    reply = generate_gpt_with_memory(text, context_memory)

    await update.message.reply_text(f"üß† GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n{reply}")

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /emails ---
async def fetch_emails_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return

    account = connect_to_exchange()
    messages = fetch_emails(account)
    await update.message.reply_text("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ª–∏—Å—Ç–∏ –∑ Exchange. –ü–µ—Ä–µ–≤—ñ—Ä –∂—É—Ä–Ω–∞–ª.")

# --- –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (OCR) ---
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return

    file = await update.message.document.get_file()
    file_path = f"/tmp/{file.file_unique_id}_{file.file_path.split('/')[-1]}"
    await file.download_to_drive(file_path)

    extracted_text = extract_text_from_file(file_path)
    context_memory = memory_lookup(extracted_text)
    reply = generate_gpt_with_memory(extracted_text, context_memory)

    await update.message.reply_text(f"üìÑ –û–±—Ä–æ–±–ª–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç. üß† GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n{reply}")

# --- –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ ---
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("emails", fetch_emails_command))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
telegram_app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

# --- Webhook FastAPI endpoint ---
@fastapi_app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"status": "ok"}
